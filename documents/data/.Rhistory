ColorIgraphPlot(BM)
db104_titles<-cbind("HouseOutright","c11HouseMortgage","c11HouseholdOnePerson","c11HouseholdMarried","c11CarsNone","c11CarsOne","c11CarsTwo","c11NSSECLowerManager","c11QualNone","c11QualLevel4","c11HealthVeryGood","c11HealthGood","c11DeprivedNone","c11Deprived1")
db104<-as.data.frame(cbind(dt1$c11HouseOutright,dt1$c11HouseMortgage,dt1$c11HouseholdOnePerson,dt1$c11HouseholdMarried,dt1$c11CarsNone,dt1$c11CarsOne,dt1$c11CarsTwo,dt1$c11NSSECLowerManager,dt1$c11QualNone,dt1$c11QualLevel4,dt1$c11HealthVeryGood,dt1$c11HealthGood,dt1$c11DeprivedNone,dt1$c11Deprived1))
BM <- BallMapper(db104,as.data.frame(dt1$leaveHanretty),18)
ColorIgraphPlot(BM,seed_for_plotting = 1)
library("BallMapper")
#We are importing the Pippa Norris dataset:
dt1<-read.table("brexit/brexitdata",sep="\t",header=TRUE)
#In this whole example we use the simplified socio-economical data gathering information about housing, relationship, number of cars, profession, self assessed health as well as the level of deprivation of the area the constituancy is located
db104<-as.data.frame(cbind(dt1$c11HouseOutright,dt1$c11HouseMortgage,dt1$c11HouseholdOnePerson,dt1$c11HouseholdMarried,dt1$c11CarsNone,dt1$c11CarsOne,dt1$c11CarsTwo,dt1$c11NSSECLowerManager,dt1$c11QualNone,dt1$c11QualLevel4,dt1$c11HealthVeryGood,dt1$c11HealthGood,dt1$c11DeprivedNone,dt1$c11Deprived1))
#As the computations with the current code will take a while, I will do them initially and subsequently will just visuakise the results
brexit <- BallMapper(db104,as.data.frame(dt1$leaveHanretty),18)
ColorIgraphPlot(brexit,seed_for_plotting=1)
brexit$landmarks
length(brexit$landmarks)
dt1<-read.table("brexit/brexitdata",sep="\t",header=TRUE)
#In this whole example we use the simplified socio-economical data gathering information about housing, relationship, number of cars, profession, self assessed health as well as the level of deprivation of the area the constituancy is located
db104<-as.data.frame(cbind(dt1$c11HouseOutright,dt1$c11HouseMortgage,dt1$c11HouseholdOnePerson,dt1$c11HouseholdMarried,dt1$c11CarsNone,dt1$c11CarsOne,dt1$c11CarsTwo,dt1$c11NSSECLowerManager,dt1$c11QualNone,dt1$c11QualLevel4,dt1$c11HealthVeryGood,dt1$c11HealthGood,dt1$c11DeprivedNone,dt1$c11Deprived1))
bd104
db104
library(fclust)
library(cluster)
install.packages(fclust)
install.packages("cluster")
install.packages("cluster")
install.packages("fclust")
library(fclust)
library(cluster)
cmeans(db104,12)
fclust::cmeans(db104,12)
fclust.cmeans(db104,12)
res.fcm <- cmeans(db105, 12)
fcm1<-res.fcm$centers
res.fcm <- cmeans(db103, 12)
fcm1<-res.fcm$centers
res.fcm <- cmeans(db104, 12)
fcm1<-res.fcm$centers
dt1<-read.table("brexit/brexitdata",sep="\t",header=TRUE)
db104<-as.data.frame(cbind(dt1$c11HouseOutright,dt1$c11HouseMortgage,dt1$c11HouseholdOnePerson,dt1$c11HouseholdMarried,dt1$c11CarsNone,dt1$c11CarsOne,dt1$c11CarsTwo,dt1$c11NSSECLowerManager,dt1$c11QualNone,dt1$c11QualLevel4,dt1$c11HealthVeryGood,dt1$c11HealthGood,dt1$c11DeprivedNone,dt1$c11Deprived1))
library(ppclust)
library(fclust)
library(cluster)
library(factoextra)
library(e1071)
install.packages("ppclust")
install.packages("fclust")
install.packages("fclust")
install.packages("cluster")
install.packages("factoextra")
install.packages("e1071")
dt1<-read.table("brexit/brexitdata",sep="\t",header=TRUE)
db104<-as.data.frame(cbind(dt1$c11HouseOutright,dt1$c11HouseMortgage,dt1$c11HouseholdOnePerson,dt1$c11HouseholdMarried,dt1$c11CarsNone,dt1$c11CarsOne,dt1$c11CarsTwo,dt1$c11NSSECLowerManager,dt1$c11QualNone,dt1$c11QualLevel4,dt1$c11HealthVeryGood,dt1$c11HealthGood,dt1$c11DeprivedNone,dt1$c11Deprived1))
cmeans(db104,6)
library(ppclust)
library(fclust)
library(cluster)
library(factoextra)
library(e1071)
cmeans(db104,6)
cm <- cmeans(db104,6)
cm$centers
cm$cluster
length(cm$cluster)
length(db104)
length(db104(,.))
length(db104(:,))
length(db104(,:))
length(db104(1,:))
length(db104(1,:))
cm$membership
cm$size
cm$cluster
cm$membership
cm <- cmeans(db104,6,m=2)
cm$cluster
length(cm$cluster)
length(cm$cluster[1,:])
length(cm$cluster[:,1])
length(cm$cluster([):,1)
length(cm$cluster(:,1)
length(cm$cluster(:,1))
cm$cluster
cm$cluster[1]
cm$cluster[2]
cm$cluster[3]
cm$cluster[4]
cm$cluster[5]
cm$cluster[6]
cm$cluster[7]
cm$cluster[70]
length(cm$membership)
lcm$membership
cm$membership
cm$membership
length(cm$membership)
3786/7
3786/6
cm$call
cm$membership[1]
cm$membership[2]
cm$membership[3]
cm$membership[1:6]
cm$membership[7:13]
cm$cluster[1]
cm$cluster[2]
cm$membership[,1]
cm$membership[,2]
cm$membership[,1]
cm$membership[,2]
cm$membership[,3]
cm$membership[,4]
cm$membership[,5]
cm$membership[,6]
cm$membership[1:2,6]
cm$membership[1:2,1]
cm$membership[1:2,2]
cm$membership[1:2,3]
cm$membership[1:2,4]
cm$membership[1:2,5]
cm$membership[1:2,6]
cm$membership[1,1:6]
sum(cm$membership[1,1:6])
sum(cm$membership[2,1:6])
sum(cm$membership[3,1:6])
cm$membership[3,1:6]
cm$cluster[3]
cm$membership[4,1:6]
cm$cluster[4]
cm$cluster
cm$membership[:,1:6]
cm$membership[.,1:6]
cm$membership[,1:6]
length(cm$membership[,1:6])
length(cm$membership[,1:6])
prob_of_belonging_to_clusters <- cm$membership[1,1:nr_of_clusters]
prob_of_belonging_to_clusters <- cm$membership[1,1:6]
prob_of_belonging_to_clusters
length(prob_of_belonging_to_clusters)
library(readstata13)
getwd()
dt<-read.dta13("fy2015.dta")
features<-cbind.data.frame(dt$X1,dt$X2,dt$X3,dt$X4,dt$X5)
features<-as.data.frame(features)
names(features)<-c("X1","X2","X3","X4","X5")
labels<-as.data.frame(dt$fail)
features
labels
max(labels)
v
length(features[,1])
length(features)
array(dim=c(2,length(features[,1])))
distances = array(dim=c(2,length(features[,1])))
length(distances)
length(distances[1,:])
length(distances[1,:])
length(features[,1])
5057*2
distances <- matrix(list(), nrow=2, ncol=length(features[,1]))
length(ddistances)
length(distances)
length(distances[,1])
length(distances[1,])
1:3
distances <- data.frame( c(1:length(features[,1])),c(1:length(features[,1])) )
length(distances)
length(distances[,1])
p1 = c(1:3)
p1
p2 = c(1:3)
compute_Euclidean_distance(p1,p2)
compute_Euclidean_distance(p1,p2)
d = compute_Euclidean_distance(p1,p2)
compute_Euclidean_distance <-
function( point1, point2 )
{
if ( length(point1) != length(point2) )
{
throw("Wrong sizes of points in compute Euclidean function.")
}
dist = 0;
for ( i in 1:length(point1) )
{
dist = dist + ( point1[i]-point2[i] )^2
}
return(dist)
}
p1 = c(1:3)p1 = c(1:3)
#
#features<-cbind.data.frame(dt$X1,dt$X2,dt$X3,dt$X4,dt$X5)
#features<-as.data.frame(features)
#names(features)<-c("X1","X2","X3","X4","X5")
#labels<-as.data.frame(dt$fail)
d <- compute_Euclidean_distance(p1,p2)
#
#features<-cbind.data.frame(dt
#dt<-read.dta13("fy2015.dta")
#
#features<-cbind.data.frame(dt$X1,dt$X2,dt$X3,dt$X4,dt$X5)
compute_Euclidean_distance <-
function( point1, point2 )
{
if ( length(point1) != length(point2) )
{
throw("Wrong sizes of points in compute Euclidean function.")
}
dist = 0;
for ( i in 1:length(point1) )
{
dist = dist + ( point1[i]-point2[i] )^2
}
return(dist)
}#compute_Euclidean_distance
p1 <- c(1:3)
p2 <- c(1:3)
d <- compute_Euclidean_distance(p1,p2)
disp(d)
print(d)
p1
p2
compute_Euclidean_distance <-
function( point1, point2 )
{
if ( length(point1) != length(point2) )
{
throw("Wrong sizes of points in compute Euclidean function.")
}
dist = 0;
for ( i in 1:length(point1) )
{
dist = dist + ( point1[i]-point2[i] )^2
}
return(dist)
}#compute_Euclidean_distance
p1 <- c(1:3)
p2 <- c(4:6)
d <- compute_Euclidean_distance(p1,p2)
print(d)
dt<-read.dta13("fy2015.dta")
features<-cbind.data.frame(dt$X1,dt$X2,dt$X3,dt$X4,dt$X5)
features<-as.data.frame(features)
names(features)<-c("X1","X2","X3","X4","X5")
labels<-as.data.frame(dt$fail)
distances <- data.frame( c(1:length(features[,1])),c(1:length(features[,1])) )
for ( i in 1:length(features[,1]) )
{
distances[i,1] = compute_Euclidean_distance( point,features[i,]  )
distances[i,2] = i
}
point = [1,1,1,1,1]
point = c(1:5)
point
distances <- data.frame( c(1:length(features[,1])),c(1:length(features[,1])) )
for ( i in 1:length(features[,1]) )
{
distances[i,1] = compute_Euclidean_distance( point,features[i,]  )
distances[i,2] = i
}
distances
df <-data_frame[order(distances[,1]),]
df <-distances[order(distances[,1]),]
df[1,:]
df[1,]
df[2,]
df[3,]
df[3,1]
df[3,2]
df[1,2]
df[2,2]
df[3,2]
av = 0
for ( i in 1:nr_of_nearest_neighs )
{
av = av + labels[ df[i,2] ]
}
av = av/nr_of_nearest_neighs
nr_of_nearest_neighs = 10
av = 0
for ( i in 1:nr_of_nearest_neighs )
{
av = av + labels[ df[i,2] ]
}
av = av/nr_of_nearest_neighs
labels["10"]
labels[10]
length(labels)
length(labels[1,])
length(labels[2,])
length(labels[3,])
length(labels[3,2])
length(labels[1,2])
length(labels[1,])
length(labels[1,])
dt<-read.dta13("fy2015.dta")
features<-cbind.data.frame(dt$X1,dt$X2,dt$X3,dt$X4,dt$X5)
features<-as.data.frame(features)
names(features)<-c("X1","X2","X3","X4","X5")
labels<-as.data.frame(dt$fail)
length(labels)
length(labels[1,])
length(labels[,1])
labels[0,1]
labels[1,1]
labels[2,1]
av = 0
for ( i in 1:nr_of_nearest_neighs )
{
av = av + labels[ df[i,2],1 ]
}
av = av/nr_of_nearest_neighs
print(av)
df[1,2]
labels[1636,1]
df[2,2]
labels[657,1]
df[3,2]
labels[2395,1]
df[4,2]
labels[788,1]
df[5,2]
labels[2776,1]
library("BallMapper")
#We are importing the Pippa Norris dataset:
dt1<-read.table("brexit/brexitdata",sep="\t",header=TRUE)
#In this whole example we use the simplified socio-economical data gathering information about housing, relationship, number of cars, profession, self assessed health as well as the level of deprivation of the area the constituancy is located
db104_titles<-cbind("HouseOutright","c11HouseMortgage","c11HouseholdOnePerson","c11HouseholdMarried","c11CarsNone","c11CarsOne","c11CarsTwo","c11NSSECLowerManager","c11QualNone","c11QualLevel4","c11HealthVeryGood","c11HealthGood","c11DeprivedNone","c11Deprived1")
db104<-as.data.frame(cbind(dt1$c11HouseOutright,dt1$c11HouseMortgage,dt1$c11HouseholdOnePerson,dt1$c11HouseholdMarried,dt1$c11CarsNone,dt1$c11CarsOne,dt1$c11CarsTwo,dt1$c11NSSECLowerManager,dt1$c11QualNone,dt1$c11QualLevel4,dt1$c11HealthVeryGood,dt1$c11HealthGood,dt1$c11DeprivedNone,dt1$c11Deprived1))
#Let us construct a BM graph and colour it by whatever, for instance by percentage of support for Brexit:
BM <- BallMapper(db104,as.data.frame(dt1$leaveHanretty),18)
ColorIgraphPlot(BM)
library("BallMapper")
dt1<-read.table("brexit/brexitdata",sep="\t",header=TRUE)
db104_titles<-cbind("HouseOutright","c11HouseMortgage","c11HouseholdOnePerson","c11HouseholdMarried","c11CarsNone","c11CarsOne","c11CarsTwo","c11NSSECLowerManager","c11QualNone","c11QualLevel4","c11HealthVeryGood","c11HealthGood","c11DeprivedNone","c11Deprived1")
db104<-as.data.frame(cbind(dt1$c11HouseOutright,dt1$c11HouseMortgage,dt1$c11HouseholdOnePerson,dt1$c11HouseholdMarried,dt1$c11CarsNone,dt1$c11CarsOne,dt1$c11CarsTwo,dt1$c11NSSECLowerManager,dt1$c11QualNone,dt1$c11QualLevel4,dt1$c11HealthVeryGood,dt1$c11HealthGood,dt1$c11DeprivedNone,dt1$c11Deprived1))
BM <- BallMapper(db104,as.data.frame(dt1$leaveHanretty),18)
ColorIgraphPlot(BM,seed_for_plotting=1)
library("Rcpp")
Rcpp::cppFunction("
void showValue(double x) {
Rcout << "The value is " << x << std::endl;
}
")
2+2
x <- range(from=0,to=2*pi,10)
x
x <- range(from=0,to=2*pi)
x
x <- range(from=0,to=2*pi,number=100)
x
x <- linspace(0,2*pi,100)
x <- linspace(0,2*pi,100)
x <- seq(from = 0, to = 2*pi, by = 100)
y1 <- sin(x)
y2 <- cos(x)
scatter(y1,y2)
plot(y1,y2)
y1
x
x <- seq(from = 0, to = 2*pi, by = 0.1)
y1 <- sin(x)
y2 <- cos(x)
scatter(y1,y2)
plot(y1,y2)
install.packages("spatstat")
library(BallMapper)
library(spatstat)
################## from Pawel's tutorial ###############
var <- seq(from=0,to=6.3,by=0.1)
points <- as.data.frame( cbind( sin(var),cos(var) ) )
values <- as.data.frame( sin(var) )
epsilon <- 0.25
plot(points)
colorByAllVariables(l, points,
fileNamePrefix = "output_", defaultXResolution = 512,
defaultYResolution = 512)
coloredDynamicNetwork(l, showLegend = FALSE)
window=1000
x <- runif(window, 0, 10)
y <- runif(window, 0, 10)
PC= cbind(x,y)
plot(PC, col = sample(colours(), 10))
sample(colours(), 10)
window=1000
x <- runif(window, 0, 10)
y <- runif(window, 0, 10)
PC= cbind(x,y)
plot(PC
window=1000
x <- runif(window, 0, 10)
y <- runif(window, 0, 10)
PC= cbind(x,y)
plot(PC)
epsilon <- 1.0
var <- rep(1,10)
points <- as.data.frame( PC )
values <- as.data.frame( var )
l <- BallMapper(points,values,epsilon)
plot(points)
plot(points)
ColorIgraphPlot(l, showVertexLabels = F, minimal_ball_radius = 1,
maximal_ball_scale = 8)
var
values
length(points)
length(points[,1])
length(values )
epsilon <- 1.0
var <- rep(1,1000)
points <- as.data.frame( PC )
values <- as.data.frame( var )
l <- BallMapper(points,values,epsilon)
#coloredDynamicNetwork(l, showLegend = FALSE)
ColorIgraphPlot(l, showVertexLabels = F, minimal_ball_radius = 1,
maximal_ball_scale = 8)
var
values
l <- BallMapper(points,values,epsilon)
l$vertices
l$landmarks
ColorIgraphPlot(l)
ColorIgraphPlot(l)
rand()
random()
rnorm(10)
PC= cbind(x,y)
plot(PC, col = sample(colours(), 10))
epsilon <- 1.0
var <- rnorm(1000)
points <- as.data.frame( PC )
values <- as.data.frame( var )
l <- BallMapper(points,values,epsilon)
#coloredDynamicNetwork(l, showLegend = FALSE)
ColorIgraphPlot(l, showVertexLabels = F, minimal_ball_radius = 1,
maximal_ball_scale = 8)
plot(points)
epsilon <- 1.0
var <- rnorm(1000)
points <- as.data.frame( PC )
values <- as.data.frame( var )
l <- BallMapper(points,values,epsilon)
#coloredDynamicNetwork(l, showLegend = FALSE)
ColorIgraphPlot(l, showVertexLabels = F, minimal_ball_radius = 1,
maximal_ball_scale = 8)
epsilon <- 1.0
var <- rnorm(1000)
points <- as.data.frame( PC )
values <- as.data.frame( var )
l <- BallMapper(points,values,epsilon)
#coloredDynamicNetwork(l, showLegend = FALSE)
ColorIgraphPlot(l, showVertexLabels = F, minimal_ball_radius = 1,
maximal_ball_scale = 8)
epsilon <- 1.0
var <- rnorm(1000)
points <- as.data.frame( PC )
values <- as.data.frame( var )
l <- BallMapper(points,values,epsilon)
#coloredDynamicNetwork(l, showLegend = FALSE)
ColorIgraphPlot(l, showVertexLabels = F, minimal_ball_radius = 1,
maximal_ball_scale = 8)
epsilon <- 1.0
var <- rnorm(1000)
points <- as.data.frame( PC )
values <- as.data.frame( var )
l <- BallMapper(points,values,epsilon)
#coloredDynamicNetwork(l, showLegend = FALSE)
ColorIgraphPlot(l, showVertexLabels = F, minimal_ball_radius = 1,
maximal_ball_scale = 8)
q()
getwd()
setwd("~/GitHub/dioscuri-tda/documents/data")
rm(list=ls())
points <- read.table(file = "boston",header=FALSE, sep="\t")
values <- read.table(file = "boston_prices",header=FALSE, sep="\n")
epsilon <- 100
l <- BallMapper(points,values,epsilon)
rm(list=ls())
points <- read.table(file = "boston",header=FALSE, sep="\t")
values <- read.table(file = "boston_prices",header=FALSE, sep="\n")
epsilon <- 100
l <- BallMapper::BallMapper(points,values,epsilon)
ColorIgraphPlot(l)
library(BallMapper)
library(RBallMapper)
BallMapper
library(BallMapper)
install(BallMapper)
install.packages("BallMapper")
library(BallMapper)
points <- read.table(file = "boston",header=FALSE, sep="\t")
values <- read.table(file = "boston_prices",header=FALSE, sep="\n")
epsilon <- 100
l <- BallMapper::BallMapper(points,values,epsilon)
ColorIgraphPlot(l)
small = c(10,11,12,13)
large = 1:9
small_pts = points_covered_by_landmarks(l,small)
large_pts = points_covered_by_landmarks(l,large)
find_dominant_difference_using_averages(points,small_pts,large_pts)
library(BallMapper)
points <- read.table(file = "boston",header=FALSE, sep="\t")
values <- read.table(file = "boston_prices",header=FALSE, sep="\n")
epsilon <- 100
l <- BallMapper::BallMapper(points,values,epsilon)
ColorIgraphPlot(l)
small = c(10,11,12,13)
large = 1:9
small_pts = points_covered_by_landmarks(l,small)
large_pts = points_covered_by_landmarks(l,large)
small_pts
small_pts
large_pts
find_dominant_difference_using_averages(points,small_pts,large_pts)
